import java.util.LinkedList;
import java.util.Queue;

//Execution of this algorithm expects user to create a class Graph with vertex and adjacency matrix(Map<Integer, LinkedList<Edge>>)
public class BreadthFirstSearch {
	
	private Graph graph;
	
	private boolean[] visited;
	
	public BreadthFirstSearch(Graph graph) {
		this.graph = graph;
		visited = new boolean[graph.getVertex()];
	}
	
	public void breadthFirstSearch() {
	
		for(int i = 0; i< graph.getVertex(); i++) {
			if(!visited[i]) {
				bfsUtil(i);
			}
		}
	}
	
	private void bfsUtil(int vertex) {
		visited[vertex] = true;
		
		Queue<Integer> queue = new LinkedList<Integer>();
		
		queue.add(vertex);
		
		while(!queue.isEmpty()) {
			int entry = queue.poll();
			System.out.println(entry);
			LinkedList<Edge> edges = graph.getAdjMatrix().get(entry);
			for(Edge edge : edges) {
				if(!visited[edge.getDest()]) {
					visited[edge.getDest()] = true;
					queue.add(edge.getDest());
				}
			}
		}
		
	}

}
